provider "aws" {
shared_credentials_file  = "/home/ec2-user/.aws/credentials"
profile                  = "default"
    region = "${var.region}"
}

resource "aws_s3_bucket" "oab-apis-deployment-dev" {
  bucket = "oab2-apis-deployment-dev"
  acl    = "public-read-write"
  request_payer = "BucketOwner"
  region = "${var.region}"
  cors_rule {
    allowed_headers = ["Authorization"]
    allowed_methods = ["GET"]
    allowed_origins = ["*"]
    max_age_seconds = 3000
  }
  
  provisioner "local-exec" {
    command = "${var.sets3acl_cmd} ${aws_s3_bucket.oab-apis-deployment-dev.bucket}"
  }
  provisioner "local-exec" {
	when = "destroy"
    command = "	aws s3 rm s3://oab2-apis-deployment-dev --recursive"
  }

}
resource "aws_s3_bucket" "oab-apis-deployment-stg" {
  bucket = "oab2-apis-deployment-stg"
  acl    = "public-read-write"
  request_payer = "BucketOwner"
  region = "${var.region}"
  cors_rule {
    allowed_headers = ["Authorization"]
    allowed_methods = ["GET"]
    allowed_origins = ["*"]
    max_age_seconds = 3000
  }
  
  provisioner "local-exec" {
    command = "${var.sets3acl_cmd} ${aws_s3_bucket.oab-apis-deployment-stg.bucket}"
  }
  provisioner "local-exec" {
	when = "destroy"
    command = "	aws s3 rm s3://oab2-apis-deployment-stg --recursive"
  }

}
resource "aws_s3_bucket" "oab-apis-deployment-prod" {
  bucket = "oab2-apis-deployment-prod"
  acl    = "public-read-write"
  request_payer = "BucketOwner"
  region = "${var.region}"
  cors_rule {
    allowed_headers = ["Authorization"]
    allowed_methods = ["GET"]
    allowed_origins = ["*"]
    max_age_seconds = 3000
  }
  
  provisioner "local-exec" {
    command = "${var.sets3acl_cmd} ${aws_s3_bucket.oab-apis-deployment-prod.bucket}"
  }
  provisioner "local-exec" {
	when = "destroy"
    command = "	aws s3 rm s3://oab2-apis-deployment-prod --recursive"
  }
  
}

resource "aws_api_gateway_rest_api" "jazz-dev" {
  name        = "jazz2-dev"
  description = "DEV API gateway for Tmobile demo "
}
resource "aws_api_gateway_rest_api" "jazz-stag" {
  name        = "jazz2-stag"
  description = "STG API for Tmobile demo"
}
resource "aws_api_gateway_rest_api" "jazz-prod" {
  name        = "jazz2-prod"
  description = "PROD API for Tmobile demo"
  provisioner "local-exec" {
    command = "git clone https://ustharin:Tmobiledemo1@github.com/tmobile/jazz-core.git"
  }
  provisioner "local-exec" {
    command = "${var.configureApikey_cmd} ${aws_api_gateway_rest_api.jazz-dev.id} ${aws_api_gateway_rest_api.jazz-stag.id} ${aws_api_gateway_rest_api.jazz-prod.id} ${var.region} ${var.jenkinspropsfile}"
  }
  provisioner "local-exec" {
	when = "destroy"
    command = "	rm -rf ./jazz-core; rm -rf ./jazz-core-bitbucket"
  }
}
resource "aws_s3_bucket" "jazz-web" {
  bucket = "${var.envPrefix}-web"
  acl    = "public-read-write"
  request_payer = "BucketOwner"
  region = "${var.region}"
  depends_on = ["aws_api_gateway_rest_api.jazz-prod" ]
  cors_rule {
    allowed_headers = ["Authorization"]
    allowed_methods = ["GET"]
    allowed_origins = ["*"]
    max_age_seconds = 3000
  }
  
  website {
    index_document = "index.html"

    routing_rules = <<EOF
[{
    "Condition": {
        "KeyPrefixEquals": "docs/"
    },
    "Redirect": {
        "ReplaceKeyPrefixWith": "documents/"
    }
}]
EOF
  }

  provisioner "local-exec" {
    command = "${var.sets3acl_cmd} ${aws_s3_bucket.jazz-web.bucket}"
  }
  provisioner "local-exec" {
    command = "aws s3 cp ./jazz-core/cloud-api-onboarding-website/app s3://${aws_s3_bucket.jazz-web.bucket} --recursive --region ${var.region}"
  }
  provisioner "local-exec" {
    command = "${var.sets3aclrecurs_cmd} ${aws_s3_bucket.jazz-web.bucket} ./jazz-core/cloud-api-onboarding-website/app"
  }  

  provisioner "local-exec" {
	when = "destroy"
    command = "	aws s3 rm s3://${aws_s3_bucket.jazz-web.bucket} --recursive"
  }
  provisioner "local-exec" {
	when = "destroy"
    command = "rm -rf ./jazz-core"
  }
  provisioner "local-exec" {
	when = "destroy"
    command = "rm -rf ./jazz-core-bitbucket"
  }
}



resource "aws_iam_policy" "basic_execution_policy" {
  name        = "basic2_execution_aws_logs"
  path        = "/"
  description = "aws_logs access policy"

  policy = <<EOF
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": [
                "logs:*"
            ],
            "Resource": "arn:aws:logs:*:*:*"
        }
    ]
}
EOF
}

resource "aws_iam_role" "lambda_role" {
  name = "lambda2_basic_execution_1"
  assume_role_policy = <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
		{
			"Sid": "",
			"Effect": "Allow",
			"Principal": {
						"Service": "apigateway.amazonaws.com"
			},
			"Action": "sts:AssumeRole"
		},
		{
			"Effect": "Allow",
			"Principal": {
						"Service": "lambda.amazonaws.com"
			},
			"Action": "sts:AssumeRole"
		}
   ]
}
EOF
}




resource "aws_iam_role_policy_attachment" "lambdafullaccess" {
    role       = "${aws_iam_role.lambda_role.name}"
    policy_arn = "arn:aws:iam::aws:policy/AWSLambdaFullAccess"
}
resource "aws_iam_role_policy_attachment" "apigatewayinvokefullAccess" {
    role       = "${aws_iam_role.lambda_role.name}"
    policy_arn = "arn:aws:iam::aws:policy/AmazonAPIGatewayInvokeFullAccess"
}
resource "aws_iam_role_policy_attachment" "cloudwatchlogaccess" {
    role       = "${aws_iam_role.lambda_role.name}"
    policy_arn = "${aws_iam_policy.basic_execution_policy.arn}"
}

//resource "aws_key_pair" "auth" {
 // key_name   = "${lookup(var.keypair, "key_name")}"
  //public_key = "${file("${lookup(var.keypair, "public_key")}")}"
//}
# Create a VPC to launch our instances into
resource "aws_vpc" "demo" {
  cidr_block = "10.0.0.0/16"
  tags {  Name = "${var.envPrefix}_VPC"  }
}

# Create an internet gateway to give our subnet access to the outside world
resource "aws_internet_gateway" "demo" {
  vpc_id = "${aws_vpc.demo.id}"
  tags {  Name = "${var.envPrefix}_Gateway"  }
}

# Grant the VPC internet access on its main route table
resource "aws_route" "internet_access" {
  route_table_id         = "${aws_vpc.demo.main_route_table_id}"
  destination_cidr_block = "0.0.0.0/0"
  gateway_id             = "${aws_internet_gateway.demo.id}"
}

# Create a subnet to launch our instances into
resource "aws_subnet" "demo" {
  vpc_id                  = "${aws_vpc.demo.id}"
  cidr_block              = "10.0.0.0/24"
  map_public_ip_on_launch = true
  tags {  Name = "${var.envPrefix}_subnet"  }
  
}
# A security group for the ELB so it is accessible via the web
resource "aws_security_group" "jenkinselb" {
  name        = "${var.envPrefix}_jenkinselb_sg"
  description = "Used for jenkins elb"
  vpc_id      = "${aws_vpc.demo.id}"
  tags {  Name = "${var.envPrefix}_jenkinselb"  }

  # HTTP access from anywhere
  ingress {
    from_port   = 8080
    to_port     = 8080
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
  

  # outbound internet access
  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}
resource "aws_security_group" "bitbucketelb" {
  name        = "${var.envPrefix}_bitbucketelb_sg"
  description = "Used for bitbucketelb demo"
  vpc_id      = "${aws_vpc.demo.id}"
  tags {  Name = "${var.envPrefix}_bitbucketelb"  }

  
  # Bitbucket ports
  ingress {
    from_port   = 7990
    to_port     = 7990
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
  ingress {
    from_port   = 7992
    to_port     = 7992
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
  ingress {
    from_port   = 7993
    to_port     = 7993
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  # outbound internet access
  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

# Our default security group to access
# the instances over SSH and HTTP
resource "aws_security_group" "jenkins" {
  name        = "jenkins_sg"
  description = "Used for jenkins server"
  vpc_id      = "${aws_vpc.demo.id}"
  tags {  Name = "${var.envPrefix}_jenkins_server"}

  # SSH access from anywhere
  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  # HTTP access from the VPC
  ingress {
    from_port   = 8080
    to_port     = 8080
    protocol    = "tcp"
    cidr_blocks = ["10.0.0.0/16"]
  }

  # outbound internet access
  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

resource "aws_security_group" "bitbucket" {
  name        = "bitbucketserver_sg"
  description = "Used for bitbuckerserver"
  vpc_id      = "${aws_vpc.demo.id}"
  tags {  Name = "${var.envPrefix}_bitbucket_server" }

  # SSH access from anywhere
  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port   = 7990
    to_port     = 7990
    protocol    = "tcp"
    cidr_blocks = ["10.0.0.0/16"]
  }
  ingress {
    from_port   = 7992
    to_port     = 7992
    protocol    = "tcp"
    cidr_blocks = ["10.0.0.0/16"]
  }
  ingress {
    from_port   = 7993
    to_port     = 7993
    protocol    = "tcp"
    cidr_blocks = ["10.0.0.0/16"]
  }

  # outbound internet access
  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}
resource "aws_instance" "jenkinsserver" {
  instance_type = "t2.medium"
  ami = "${var.jenkinsserver_ami}"
  key_name   = "${lookup(var.keypair, "key_name")}"
  vpc_security_group_ids = ["${aws_security_group.jenkins.id}"]
  subnet_id = "${aws_subnet.demo.id}"
  depends_on = ["aws_elb.jenkinselb","aws_elb.bitbucketelb","aws_api_gateway_rest_api.jazz-dev","aws_s3_bucket.jazz-web","aws_iam_role.lambda_role" ]
  tags {  Name = "${var.envPrefix}_jenkinsserver"  }
  connection {
    user = "ec2-user"
	type     = "ssh"
	private_key = "${file("${lookup(var.keypair, "private_key")}")}"
  }   
  provisioner "file" {
	  source      = "${var.cookbooksDir}/jenkins/recipes/startjenkins.rb"
	  destination = "~/cookbooks/jenkins/recipes/startjenkins.rb"
  }
  provisioner "file" {
	  source      = "${var.cookbooksDir}/jenkins/files/default"
	  destination = "~/cookbooks/jenkins/files/"
  }
  provisioner "file" {
	  source      = "${var.cookbooksDir}/jenkins/files/jobs"
	  destination = "~/cookbooks/jenkins/files"
  }
  provisioner "file" {
	  source      = "${var.cookbooksDir}/jenkins/files/node"
	  destination = "~/cookbooks/jenkins/files"
  }
  provisioner "file" {
	  source      = "${var.cookbooksDir}/jenkins/files/scriptapproval"
	  destination = "~/cookbooks/jenkins/files"
  }
  provisioner "file" {
	  source      = "${var.cookbooksDir}/jenkins/files/credentials"
	  destination = "~/cookbooks/jenkins/files"
  }
  provisioner "file" {
	  source      = "${var.cookbooksDir}/jenkins/attributes"
	  destination = "~/cookbooks/jenkins/"
  }
  provisioner "local-exec" {
    command = "${var.apigatewayimporter_cmd}  ec2-user@${aws_instance.jenkinsserver.public_ip} yes yes "
  }
  provisioner "remote-exec" {
    inline = [
	  "sudo chef-client --local-mode -c ~/chefconfig/client.rb --override-runlist jenkins::startjenkins"
    ]
  }
  
  provisioner "local-exec" {
    command = "${var.modifyCodebase_cmd}  ${aws_security_group.jenkins.id} ${aws_subnet.demo.id} ${aws_iam_role.lambda_role.arn} ${var.region}"
  }
}
resource "aws_instance" "bitbucketserver" {
  instance_type = "t2.medium"
  ami = "${var.bitbucketserver_ami}"
  key_name   = "${lookup(var.keypair, "key_name")}"
  vpc_security_group_ids = ["${aws_security_group.bitbucket.id}"]
  subnet_id = "${aws_subnet.demo.id}"
  depends_on = ["aws_elb.bitbucketelb"]
  tags {  Name = "${var.envPrefix}_bitbucketserver"  }
  connection {
    user = "ec2-user"
	type     = "ssh"
	private_key = "${file("${lookup(var.keypair, "private_key")}")}"
  } 
  provisioner "file" {
	  source      = "${var.chefconfigDir}/bitbucketelbconfig.json"
	  destination = "~/chefconfig/bitbucketelbconfig.json"
  }
  provisioner "remote-exec" {
    inline = [
	  "sudo chef-client --local-mode -c ~/chefconfig/client.rb -j ~/chefconfig/bitbucketelbconfig.json --override-runlist bitbucket::startserver"
    ]
  }
}
resource "aws_elb" "jenkinselb" {
  name = "${var.envPrefix}-jenkinselb"
  subnets         = ["${aws_subnet.demo.id}"]
  security_groups = ["${aws_security_group.jenkinselb.id}"]
  tags {  Name = "${var.envPrefix}_jenkinsserver_elb"  }
  depends_on = ["aws_api_gateway_rest_api.jazz-dev","aws_s3_bucket.jazz-web" ]
  listener {
    instance_port     = 8080
    instance_protocol = "http"
    lb_port           = 8080
    lb_protocol       = "http"
  }
  health_check {
    healthy_threshold   = 10
    unhealthy_threshold = 2
    timeout             = 5
    target              = "TCP:8080"
    interval            = 30
  }  
  provisioner "local-exec" {
    command = "${var.configureJenkinselb_cmd} ${aws_elb.jenkinselb.dns_name} ${var.jenkinsattribsfile} ${var.bitbucketclient_cmd}"
  }  
}
resource "aws_elb" "bitbucketelb" {
  name = "${var.envPrefix}-bitbucketelb"
  subnets         = ["${aws_subnet.demo.id}"]
  security_groups = ["${aws_security_group.bitbucketelb.id}"]
  tags {  Name = "${var.envPrefix}_bitbucketserver_elb"  }
  depends_on = ["aws_api_gateway_rest_api.jazz-dev","aws_s3_bucket.jazz-web" ]

  listener {
    instance_port     = 7990
    instance_protocol = "http"
    lb_port           = 7990
    lb_protocol       = "http"
  }
  listener {
    instance_port     = 7992
    instance_protocol = "http"
    lb_port           = 7992
    lb_protocol       = "http"
  }
  listener {
    instance_port     = 7993
    instance_protocol = "http"
    lb_port           = 7993
    lb_protocol       = "http"
  }
  health_check {
    healthy_threshold   = 10
    unhealthy_threshold = 2
    timeout             = 5
    target              = "TCP:7990"
    interval            = 30
  }
  provisioner "local-exec" {
    command = "${var.configurebitbucketelb_cmd} ${aws_elb.bitbucketelb.dns_name}  ${var.chefconfigDir}/bitbucketelbconfig.json ${var.jenkinsattribsfile} ${var.jenkinspropsfile} ${var.bitbucketclient_cmd} ${var.envPrefix}"
  }   
}

resource "aws_elb_attachment" "jenkins" {
  elb      = "${aws_elb.jenkinselb.id}"
  instance = "${aws_instance.jenkinsserver.id}"
}

resource "aws_elb_attachment" "bitbucket" {
  elb      = "${aws_elb.bitbucketelb.id}"
  instance = "${aws_instance.bitbucketserver.id}"
  depends_on = ["aws_elb_attachment.jenkins","aws_elasticsearch_domain.elasticsearch_domain"]
  provisioner "local-exec" {
    command = "${var.bitbucketclient_cmd} "
  }  

}
