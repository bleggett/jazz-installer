@Library('notifications-library@v1.1.2') _
pipeline {
  agent any

  environment {
      AWS_ACCESS_KEY_ID     = credentials('AWS_ACCESS_KEY_ID')
      AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
      JENKINS_USER          = credentials('JENKINSUSER')
      BITBUCKET_USER        = credentials('BITBUCKETUSER')
  }

  stages {
      stage('Provisioning') {
        steps {
            sh '''
            day=`date -I | cut -d'-' -f3`
            month=`date -I | cut -d'-' -f2`
            year=`date -I | cut -d'-' -f1`
            stack_name="jazz$year$month$day"
            echo $stack_name > SN
            sed -i "s/{stack_name}/$stack_name/g" jenkins-automator/input_parameters_python
            sed -i "s/Stack_name/$stack_name/g" vars/sendStartNotifications.groovy
            sed -i "s/Stack_name/$stack_name/g" vars/sendNotifications.groovy
            sed -i "s/Stack_name/$stack_name/g" vars/sendSuccessNotifications.groovy
            sed -i "s/Stack_name/$stack_name/g" vars/sendFailureNotifications.groovy
            echo "Building the Stack: $stack_name now"
            '''
            script {
            def stack_name = readFile('SN').trim()
            sendStartNotifications('STARTED', stack_name)
            }
            sh 'sed -i "s/{aws_access_key}/${AWS_ACCESS_KEY_ID}/g" jenkins-automator/input_parameters_shell'
            sh 'sed -i "s/{aws_secret_key}/${AWS_SECRET_ACCESS_KEY}/g" jenkins-automator/input_parameters_shell'

            sh 'sed -i "s/{jenkinsuser}/${JENKINS_USER_USR}/g" jenkins-automator/input_parameters_python'
            sh 'sed -i "s/{jenkinspasswd}/${JENKINS_USER_PSW}/g" jenkins-automator/input_parameters_python'
            sh 'sed -i "s/{bitbucketuser}/${BITBUCKET_USER_USR}/g" jenkins-automator/input_parameters_python'
            sh 'sed -i "s/{bitbucketpasswd}/${BITBUCKET_USER_PSW}/g" jenkins-automator/input_parameters_python'

            sh 'sed -i "s/{jenkinsuser}/${JENKINS_USER_USR}/g" jenkins-automator/cleanup.sh'
            sh 'sed -i "s/{jenkinspasswd}/${JENKINS_USER_PSW}/g" jenkins-automator/cleanup.sh'
            sh 'sed -i "s/{bitbucketuser}/${BITBUCKET_USER_USR}/g" jenkins-automator/cleanup.sh'
            sh 'sed -i "s/{bitbucketpasswd}/${BITBUCKET_USER_PSW}/g" jenkins-automator/cleanup.sh'
            }
        }
      stage('Cleaning up Existing Jenkins and BB') {
        steps {
            sh 'bash jenkins-automator/cleanup.sh'
          }
      }
      stage('Detecting and Destroying if previous stack exists') {
        steps {
            sh 'sed -i "s,nohup.*&,terraform destroy --force | tee -a ../../stack_deletion.out,g" ~/jazz-installer/destroy.sh'
            sh 'sed -i "s,cd *installscripts.*,cd ~/jazz-installer/installscripts/terraform-unix-noinstances-jazz,g" ~/jazz-installer/destroy.sh'
            sh 'sed -i "s/sudo rm -rf.*//g" ~/jazz-installer/destroy.sh'
            sh 'bash jenkins-automator/detect_previous_build.sh'
        }
      }
      stage('Running Installer.sh') {
        steps {
            sh 'cd ~ && curl -L https://raw.githubusercontent.com/tmobile/jazz-installer/v1.1.2/installscripts/terraforminstaller/rhel7Installer.sh -o rhel7Installer.sh && chmod +x rhel7Installer.sh'
            sh '~/rhel7Installer.sh v1.1.2 < ${WORKSPACE}/jenkins-automator/input_parameters_shell'
        }
      }
      stage('Running run.py') {
        steps {
            sh 'sed -i "s,nohup.*&,./scripts/create.sh | tee -a ../../stack_creation.out,g" ~/jazz-installer/installscripts/wizard/run.py'
            sh 'cd ~/jazz-installer/installscripts/wizard && ./run.py < ${WORKSPACE}/jenkins-automator/input_parameters_python'
            sh 'cp ~/jazz-installer/installscripts/terraform-unix-noinstances-jazz/settings.txt ${WORKSPACE}/Stack_details.txt'
        }
      }
  }
  post {
    failure {
      script {
        def stack_name = readFile('SN').trim()
        sendFailureNotifications currentBuild.result, stack_name
      }
    }
    success {
      script {
        def stack_name = readFile('SN').trim()
        sendSuccessNotifications currentBuild.result, stack_name
      }
    }
  }
}
